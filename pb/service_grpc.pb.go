// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WasteBinClient is the client API for WasteBin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WasteBinClient interface {
	CreateUserDetails(ctx context.Context, in *CreateUserDetailsRequest, opts ...grpc.CallOption) (*CreateUserDetailsResponse, error)
	FetchUserDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateUserDetailsResponse, error)
}

type wasteBinClient struct {
	cc grpc.ClientConnInterface
}

func NewWasteBinClient(cc grpc.ClientConnInterface) WasteBinClient {
	return &wasteBinClient{cc}
}

func (c *wasteBinClient) CreateUserDetails(ctx context.Context, in *CreateUserDetailsRequest, opts ...grpc.CallOption) (*CreateUserDetailsResponse, error) {
	out := new(CreateUserDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.WasteBin/CreateUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasteBinClient) FetchUserDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateUserDetailsResponse, error) {
	out := new(CreateUserDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.WasteBin/FetchUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WasteBinServer is the server API for WasteBin service.
// All implementations must embed UnimplementedWasteBinServer
// for forward compatibility
type WasteBinServer interface {
	CreateUserDetails(context.Context, *CreateUserDetailsRequest) (*CreateUserDetailsResponse, error)
	FetchUserDetails(context.Context, *emptypb.Empty) (*CreateUserDetailsResponse, error)
	mustEmbedUnimplementedWasteBinServer()
}

// UnimplementedWasteBinServer must be embedded to have forward compatible implementations.
type UnimplementedWasteBinServer struct {
}

func (UnimplementedWasteBinServer) CreateUserDetails(context.Context, *CreateUserDetailsRequest) (*CreateUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDetails not implemented")
}
func (UnimplementedWasteBinServer) FetchUserDetails(context.Context, *emptypb.Empty) (*CreateUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserDetails not implemented")
}
func (UnimplementedWasteBinServer) mustEmbedUnimplementedWasteBinServer() {}

// UnsafeWasteBinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WasteBinServer will
// result in compilation errors.
type UnsafeWasteBinServer interface {
	mustEmbedUnimplementedWasteBinServer()
}

func RegisterWasteBinServer(s grpc.ServiceRegistrar, srv WasteBinServer) {
	s.RegisterService(&WasteBin_ServiceDesc, srv)
}

func _WasteBin_CreateUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteBinServer).CreateUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WasteBin/CreateUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteBinServer).CreateUserDetails(ctx, req.(*CreateUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasteBin_FetchUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasteBinServer).FetchUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WasteBin/FetchUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasteBinServer).FetchUserDetails(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WasteBin_ServiceDesc is the grpc.ServiceDesc for WasteBin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WasteBin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WasteBin",
	HandlerType: (*WasteBinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserDetails",
			Handler:    _WasteBin_CreateUserDetails_Handler,
		},
		{
			MethodName: "FetchUserDetails",
			Handler:    _WasteBin_FetchUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
